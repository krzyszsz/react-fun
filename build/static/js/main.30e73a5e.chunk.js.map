{"version":3,"sources":["constants/index.tsx","sliderComponent/SliderComponent.tsx","sliderComponent/SliderContainer.tsx","actions/index.tsx","flameComponent/FlameAnimation.tsx","flameComponent/FlameAnimationContainer.tsx","App.tsx","serviceWorker.ts","reducers/index.tsx","index.tsx"],"names":["CHANGE_FIRE_WIDTH","SliderComponent","_ref","_this","_ref$value","value","onSliderChange","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","MaxSliderValue","divStyle","color","width","padding","overflow","react","className","style","Slider_default","a","props","onChange","React","connect","fireWidth","dispatch","event","newWidth","type","constants","FlameAnimation","animationInterval","pixelSize","sizeX","sizeY","canvas1","context1","randomPrevious","_timerID","console","log","init","bind","assertThisInitialized","draw","generateImageArray","componentWillUnmount","window","requestAnimationFrame","clearInterval","nextProps","nextState","height","id","document","getElementById","getContext","imageArray","Math","random","lineIncrement","x","index","indexBelow","indexBelow2","indexLeft","indexRight","y","localRandom1","localRandom2","localRandom3","localRandom4","localRandom5","newColor","denormalizeColor","max","sqrt","r","normalizeColor","abs","sin","PI","_this2","imgData","getImageData","data","putImageData","setInterval","App","react_default","createElement","SliderContainer","FlameAnimationContainer","Boolean","location","hostname","match","initialState","store","createStore","state","arguments","length","undefined","action","objectSpread","ReactDOM","render","es","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30e73a5e.chunk.js","sourcesContent":["export const CHANGE_FIRE_WIDTH = 'INCREMENT_ENTHUSIASM';\r\nexport type CHANGE_FIRE_WIDTH = typeof CHANGE_FIRE_WIDTH;\r\n","import * as React from 'react';\r\nimport Slider from '@material-ui/lab/Slider';\r\n\r\nexport interface Props {\r\n    value? : number,\r\n    onSliderChange?: (event: React.ChangeEvent<{}>, value: number) => void\r\n  }\r\n\r\nexport default class SliderComponent extends React.Component<Props, object> {\r\n\r\n    public MaxSliderValue : number = 400;\r\n\r\n    constructor({value = 50, onSliderChange}:Props) {\r\n        super({value, onSliderChange});\r\n    }\r\n\r\n    render() {\r\n        const divStyle = {\r\n            color: 'blue',\r\n            width: this.MaxSliderValue,\r\n            padding: '22px 0px',\r\n            overflow: 'hidden'\r\n          };\r\n\r\n        return (\r\n            <div className=\"slidecontainer\" style={divStyle}>\r\n                <Slider \r\n                    style={divStyle}\r\n                    value={this.props.value}\r\n                    onChange={this.props.onSliderChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import { IStoreState } from '../types';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/';\r\nimport { Dispatch } from 'redux';\r\nimport  SliderComponent from './SliderComponent';\r\n\r\nexport function mapStateToProps({ fireWidth }: IStoreState) {\r\n  return {\r\n    value: fireWidth\r\n  }\r\n}\r\n\r\nexport function mapDispatchToProps(dispatch: Dispatch<actions.ChangeFireWidthAction>) {\r\n  return {\r\n    onSliderChange: (event: React.ChangeEvent<{}>, value: number) => {\r\n      dispatch(actions.changeFireWidth(value))\r\n    }      \r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SliderComponent);","import * as constants from '../constants';\r\n\r\nexport interface ChangeFireWidth {\r\n    newWidth: number;\r\n    type: typeof constants.CHANGE_FIRE_WIDTH;\r\n}\r\n\r\nexport type ChangeFireWidthAction = ChangeFireWidth /*| Another possible interface!*/;\r\n\r\nexport function changeFireWidth(newWidth: number): ChangeFireWidth {\r\n    return {\r\n        newWidth: newWidth,\r\n        type: constants.CHANGE_FIRE_WIDTH\r\n    }\r\n}\r\n","import * as React from 'react';\r\n\r\nexport interface Props {\r\n    value?: number;\r\n}\r\n\r\nclass FlameAnimation extends React.Component<Props, object> {\r\n    private animationInterval : number = 15;\r\n    private pixelSize : number = 5;\r\n    private sizeX : number = 150;\r\n    private sizeY : number = 50;\r\n    \r\n    private canvas1 : HTMLCanvasElement | null = null;\r\n    private context1 : CanvasRenderingContext2D | null = null;\r\n    private randomPrevious : number = 0;\r\n    private _timerID : number | null = null;\r\n\r\n    componentWillUnmount() {\r\n        if (this._timerID != null) {\r\n            clearInterval(this._timerID);\r\n        }\r\n      }\r\n\r\n      shouldComponentUpdate(nextProps : any, nextState : object) {\r\n        return false;\r\n      }\r\n\r\n\r\n    constructor({value = 50}: Props) {\r\n        super({value});\r\n        console.log(\"FlameAnimation initialized.\");\r\n        \r\n        this.init = this.init.bind(this);\r\n        this.draw = this.draw.bind(this);\r\n        this.generateImageArray = this.generateImageArray.bind(this);\r\n        this.componentWillUnmount = this.componentWillUnmount.bind(this);\r\n\r\n        window.requestAnimationFrame(this.draw);\r\n    }\r\n\r\n    render() {\r\n        var divStyle = {\r\n            width:  this.sizeX*this.pixelSize + \"px\",\r\n            height: this.sizeY*this.pixelSize + \"px\"\r\n          };\r\n\r\n        return (\r\n            <div>\r\n                <canvas id=\"flameCanvas\" width={this.sizeX} height={this.sizeY} style={divStyle} >\r\n                </canvas>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    normalizeColor(color : number) : number\r\n    {\r\n        const max : number = 256;\r\n        return ~~(color*max);\r\n    }\r\n    \r\n    denormalizeColor(color : number) : number\r\n    {\r\n        const max : number = 256;\r\n        return color / max;\r\n    }\r\n\r\n    init() : void {\r\n        this.canvas1 = document.getElementById(\"flameCanvas\") as HTMLCanvasElement;\r\n        if (this.canvas1 != null)\r\n        {\r\n            this.context1 = this.canvas1.getContext('2d');\r\n        }\r\n    \r\n        return;\r\n    }\r\n    \r\n    \r\n    generateImageArray(imageArray : Uint8ClampedArray) : void\r\n    {\r\n        this.randomPrevious = this.randomPrevious * 0.8 - (Math.random() - 0.5) * 0.2;    // simulates wind and random air movements\r\n        if (this.randomPrevious < -1)\r\n        {\r\n            this.randomPrevious = -1;\r\n        }\r\n    \r\n        if (this.randomPrevious > 1)\r\n        {\r\n            this.randomPrevious = 1;\r\n        }\r\n    \r\n        const lineIncrement : number = this.sizeX * 4;\r\n        const fireWidth : number = this.props.value ? this.props.value*2 : 50;\r\n\r\n        for (let x=0; x<this.sizeX; x++) {\r\n\r\n            const y0 = -1;\r\n            let index = y0 * lineIncrement + 4 * x;\r\n            let indexBelow = (y0+1) * lineIncrement + 4 * x;\r\n            let indexBelow2 = (y0+2) * lineIncrement + 4 * x;\r\n            let indexLeft = y0 * lineIncrement + 4 * (x - 1);\r\n            let indexRight = y0 * lineIncrement + 4 * (x + 1);\r\n\r\n            for (let y=0; y<this.sizeY-1; y++) {\r\n\r\n                index += lineIncrement;\r\n                indexBelow += lineIncrement;\r\n                indexBelow2 += lineIncrement;\r\n                indexLeft += lineIncrement;\r\n                indexRight += lineIncrement;\r\n    \r\n                let localRandom1 = Math.random() * 0.3 + 0.9;\r\n                let localRandom2 = (Math.random() - 0.5)/2;\r\n                let localRandom3 = (Math.random() - 0.5)/2;\r\n                let localRandom4 = (Math.random() - 0.5) /2 + 1;\r\n                let localRandom5 = (Math.random() - 0.2) * 0.4 ;\r\n    \r\n                const newColor = this.denormalizeColor( \r\n                    Math.max(0,\r\n    \r\n                    Math.sqrt(y / this.sizeY) *\r\n                    (\r\n                        (imageArray[index] * 0.08) + \r\n                        (imageArray[indexBelow] * 0.9 * localRandom1) +\r\n                        (x > 1 ? imageArray[indexLeft] * (this.randomPrevious + localRandom2) * 0.5 : 0) +\r\n                        (x < this.sizeX-1 ? imageArray[indexRight] * (-this.randomPrevious + localRandom3) * 0.5 : 0) +\r\n                        (y < this.sizeY-2 ? imageArray[indexBelow2] * (localRandom5) * 0.5 : 0)\r\n                    ) * localRandom4\r\n                    ));\r\n    \r\n                const r = this.normalizeColor(newColor) ;\r\n                // const g = 0;\r\n                // const b = 0;\r\n                imageArray[index] = r;\r\n                imageArray[index+1] = 0;//g;\r\n                imageArray[index+2] = 0;//b;\r\n                imageArray[index+3] = 255; // No transparency!\r\n            }\r\n    \r\n            // Initialization vector - line on the bottom of the fire:\r\n            index = 4 * (this.sizeY-1) * this.sizeX + 4 * x;\r\n            imageArray[index] = this.normalizeColor(  Math.abs(Math.sin(x * (2 * Math.PI) / (fireWidth*2) )) );\r\n            imageArray[index+1] = 0;\r\n            imageArray[index+2] = 0;\r\n            imageArray[index+3] = 255;\r\n        }\r\n    }\r\n\r\n    draw() : void {\r\n        this.init();\r\n    \r\n        if (this.context1 == null ) {\r\n            console.log(\"Context == null. Exiting.\");\r\n            return;\r\n        }\r\n    \r\n        const imgData : ImageData = this.context1.getImageData(0, 0, this.sizeX, this.sizeY);\r\n        const imageArray : Uint8ClampedArray = imgData.data;\r\n        this.generateImageArray(imageArray);\r\n        this.context1.putImageData(imgData, 0, 0);\r\n    \r\n        if (this._timerID == null) {\r\n            this._timerID = window.setInterval(()=> window.requestAnimationFrame(this.draw), this.animationInterval);\r\n        }\r\n    }\r\n}\r\n\r\nexport default FlameAnimation;","import { IStoreState } from '../types';\r\nimport { connect } from 'react-redux';\r\nimport FlameAnimation from './FlameAnimation';\r\n\r\nexport function mapStateToProps({ fireWidth }: IStoreState) {\r\n  return {\r\n    value: fireWidth\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(FlameAnimation);","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport SliderContainer from './sliderComponent/SliderContainer';\nimport FlameAnimationContainer from './flameComponent/FlameAnimationContainer';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        Fire Width:\n        <SliderContainer  />\n        <br />\n        <FlameAnimationContainer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ChangeFireWidthAction } from '../actions';\r\nimport { IStoreState } from '../types/index';\r\nimport { CHANGE_FIRE_WIDTH } from '../constants/index';\r\n\r\nconst initialState : IStoreState = {\r\n  fireWidth : 2\r\n};\r\n\r\nexport function fireReducer(\r\n    state: IStoreState = initialState, action: ChangeFireWidthAction): IStoreState {\r\n  switch (action.type) {\r\n    case CHANGE_FIRE_WIDTH:\r\n      return { ...state, fireWidth: action.newWidth };\r\n\r\n      /* Other actions here! */\r\n      default:\r\n          return state\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore } from 'redux';\r\nimport { fireReducer } from './reducers';\r\nimport { Provider } from 'react-redux';\r\nimport { IStoreState } from './types';\r\n\r\nconst store = createStore(fireReducer, {\r\n    fireWidth: 50\r\n  } as IStoreState);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}